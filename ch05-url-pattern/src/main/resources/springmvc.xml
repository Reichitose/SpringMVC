<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">




    <!--声明组件扫描器-->
    <context:component-scan base-package="com.reiuy.controller"/>

    <!--声明视图解析器,可以帮助开发人员去设置视图文件的路径-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀prefix是视图文件的路径-->
        <property name="prefix" value="/WEB-INF/view/"/>
        <!--后缀suffix是视图文件的扩展名-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <mvc:annotation-driven/>
    <!--同样的,使用mvc:resources和@RequestMapping存在冲突,建议无条件共存-->

    <!--第二种处理静态资源文件的方式
        mvc:resources加入后,框架会创建ResourceHttpHandler这个处理器对象
        并让这个对象去处理静态资源的访问,不依赖于tomcat服务器
        属性:
        mapping 访问静态资源的uri地址  使用通配符 **
        location 静态资源在项目中的目录位置
        image/**表示image文件夹下的所有文件,包括子文件夹下的所有文件
        html,js等同理
    -->

    <mvc:resources mapping="/image/**" location="/image/"/>
    <!--第一个/表示是根目录.第二个表示image是个目录-->
    <!--理解不了去看编译结束的target里的文件目录-->
    <mvc:resources mapping="/html/**" location="/html/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>

    <!--实际开发中,我们会将所有的静态资源放进static文件夹内
        并将静态资源文件以如下形式定义
        <mvc:resources mapping="/static/**" location="/static/"/>
    -->

</beans>

