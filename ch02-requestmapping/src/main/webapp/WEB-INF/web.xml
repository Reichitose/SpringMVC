<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">


    <!--声明,注册springmvc的核心对象Dispatcherservlet-->
    <!--
        需要在tomcat服务器启动后就创建Dispatcherservlet的实例
        为什么要创建Dispatcherservlet的实例呢
        因为Dispatcherservlet在他的创建过程中会同时去创建springmvc容器对象
        会读取springmvc的配置文件,把这个配置文件中的对象都创建好,
        用户发起请求时就可以直接使用对象了
        和spring中监听器是一样的


        servlet初始化会执行init方法,Dispatcherservlet在init中执行的是
        创建容器,读取配置文件的操作
        容器创建结束后,会将容器对象放入全局作用域ServletContext,使得整个web项目中
        都可以使用容器

        因为如此,我们希望tomcat启动后就可以创建servlet对象,我们使用load-on-startup


        此处会需求一个/WEB-INF/中央调度器对象id-servlet.xml的配置文件
        原因是springmvc创建容器对象时,默认读取的是这个文件
        一般情况下,我们对这个配置文件的位置进行自定义
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--自定义springmvc读取的配置文件的位置-->
        <init-param>
            <!--springmvc的配置文件的位置的属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <load-on-startup>0</load-on-startup>
        <!--此处init-param必须在load-on-startup上方,否则会报错-->
    </servlet>


    <!--使用框架的时候,url-pattern可以使用两种值
        1.使用扩展名方式,语法*.xxx,xxx是自定义的扩展名,常用的方式*.do,*.action,*.mvc等等
            http://localhost:8080/xxx/some.do
        2.使用斜线 /

    -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>



    <!--
        1)load-on-startup 元素标记容器是否应该在启动的时候加载这个servlet，(实例化并调用其init()方法)。
        2)它的值必须是一个整数，表示servlet应该被载入的顺序
        3)如果该元素不存在或者这个数为负时，则容器会当该Servlet被请求时，再加载。
        4)当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；
        5)正数的值越小，该servlet的优先级越高，应用启动时就越先加载。
            可以通过大小来确定加载的时间顺序
        6)当值相同时，容器就会自己选择顺序来加载。
    -->

</web-app>